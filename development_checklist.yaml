# Development Checklist for the Faculty Research Opportunity Notifier
# This file is the single source of truth for all development tasks.
# AI agents will read and update the 'status' of each task.
# Status values: pending, in_progress, completed, blocked


# ===================================================================
# Phase 1: Core Setup and Environment
# ===================================================================
Phase-1-Setup:
  - id: 1.1.1
    description: "Initialize project structure, git repository, and base README.md."
    status: pending
    prerequisites: []
    artifacts:
      - "README.md"
      - ".gitignore"
      - "src/__init__.py"
      - "tests/__init__.py"
    testing: "N/A. Manual verification of file structure."


  - id: 1.1.2
    description: "Set up FastAPI application boilerplate with a health check endpoint."
    status: pending
    prerequisites: [1.1.1]
    artifacts:
      - "src/main.py"
    testing:
      - "tests/test_main.py: Test the /health endpoint, ensuring it returns a 200 OK status."
      - "Mock data: N/A"


  - id: 1.1.3
    description: "Create Dockerfile for containerizing the application."
    status: pending
    prerequisites: [1.1.1, 1.1.2]
    artifacts:
      - "Dockerfile"
      - ".dockerignore"
    testing: "Manual test: Build the docker image and run the container to ensure the /health endpoint is accessible."


  - id: 1.1.4
    description: "Define Pydantic models for core data structures (FundingOpportunity, FacultyProfile, ResearchIdea)."
    status: pending
    prerequisites: [1.1.1]
    artifacts:
      - "src/core/models.py"
    testing:
      - "tests/core/test_models.py: Test model creation, validation (positive and negative cases), and serialization."
      - "Mock data: JSON objects representing valid and invalid funding opportunities and faculty profiles."


# ===================================================================
# Phase 2: Data Ingestion Agents & Tooling
# ===================================================================
Phase-2-Data-Ingestion:
  - id: 2.1.1
    description: "Develop a web scraper tool for NIH funding opportunities."
    status: pending
    prerequisites: [1.1.4]
    artifacts:
      - "src/tools/scrapers/nih_scraper.py"
    testing:
      - "tests/tools/scrapers/test_nih_scraper.py: Use a saved, static HTML file of the NIH grants page to test parsing logic."
      - "Mock data: 'tests/mock_data/nih_grants.html'"


  - id: 2.1.2
    description: "Develop a web scraper tool for PCORI funding opportunities."
    status: pending
    prerequisites: [1.1.4]
    artifacts:
      - "src/tools/scrapers/pcori_scraper.py"
    testing:
      - "tests/tools/scrapers/test_pcori_scraper.py: Use a saved, static HTML file of the PCORI grants page."
      - "Mock data: 'tests/mock_data/pcori_grants.html'"


  - id: 2.1.3
    description: "Develop a generic scraper for other funding sources (e.g., CDMRP, AHRQ)."
    status: pending
    prerequisites: [1.1.4]
    artifacts:
      - "src/tools/scrapers/generic_scraper.py"
    testing:
      - "tests/tools/scrapers/test_generic_scraper.py: Use saved HTML files from 2-3 different sources to test adaptability."
      - "Mock data: 'tests/mock_data/cdmrp.html', 'tests/mock_data/ahrq.html'"


  - id: 2.2.1
    description: "Develop a tool to query Google Scholar for faculty publications."
    status: pending
    prerequisites: [1.1.4]
    artifacts:
      - "src/tools/faculty_finders/google_scholar_finder.py"
    testing:
      - "tests/tools/faculty_finders/test_google_scholar_finder.py: Mock the external API call to Google Scholar to test the data parsing and FacultyProfile object creation."
      - "Mock data: 'tests/mock_data/scholar_api_response.json'"


  - id: 2.3.1
    description: "Create a 'Data Ingestion Agent' that uses scraper tools to fetch and store raw data."
    status: pending
    prerequisites: [2.1.1, 2.1.2, 2.1.3, 2.2.1]
    artifacts:
      - "src/agents/ingestion_agent.py"
      - "data/raw/funding_opportunities.json"
      - "data/raw/faculty_profiles.json"
    testing:
      - "tests/agents/test_ingestion_agent.py: Mock the scraper tools to ensure the agent calls them correctly and saves the output."
      - "Mock data: Mock Python objects returned by the scraper tools."


# ===================================================================
# Phase 3: Core Logic Agents
# ===================================================================
Phase-3-Core-Logic:
  - id: 3.1.1
    description: "Create a 'Matcher Agent' with multi-dimensional scoring (research methods, career stage, deadline urgency)."
    status: pending
    prerequisites: [2.3.1]
    artifacts:
      - "src/agents/matcher_agent.py"
      - "src/core/scoring_models.py"
    testing:
      - "tests/agents/test_matcher_agent.py: Test multi-dimensional scoring logic with mock faculty/funding data. Verify deadline urgency weighting, career stage considerations, and methodology alignment."
      - "tests/core/test_scoring_models.py: Unit tests for individual scoring components."
      - "Mock data: 'tests/mock_data/processed_faculty.json', 'tests/mock_data/processed_funding.json', 'tests/mock_data/scoring_test_cases.json'"


  - id: 3.2.1
    description: "Create an 'Idea Generation Agent' that generates multiple proposal variants (conservative, innovative, stretch) with budget/timeline estimates."
    status: pending
    prerequisites: [3.1.1]
    artifacts:
      - "src/agents/idea_agent.py"
      - "src/core/proposal_variants.py"
    testing:
      - "tests/agents/test_idea_agent.py: Mock the LLM API call. Test generation of 3 proposal variants with different risk levels and verify budget/timeline estimation logic."
      - "tests/core/test_proposal_variants.py: Test variant classification and estimation algorithms."
      - "Mock data: Matched faculty/funding pairs, mock LLM responses for each variant type, budget estimation test cases."


  - id: 3.3.1
    description: "Create a 'Collaborator Suggestion Agent' to find potential collaborators."
    status: pending
    prerequisites: [3.1.1]
    artifacts:
      - "src/agents/collaborator_agent.py"
    testing:
      - "tests/agents/test_collaborator_agent.py: Provide a list of faculty profiles and a target research area. Verify the agent identifies faculty with overlapping expertise."
      - "Mock data: 'tests/mock_data/full_faculty_list.json'"


  - id: 3.4.1
    description: "Create a 'Notification Agent' to format and prepare email notifications."
    status: pending
    prerequisites: [3.2.1, 3.3.1]
    artifacts:
      - "src/agents/notification_agent.py"
    testing:
      - "tests/agents/test_notification_agent.py: Provide a complete data package (match, ideas, collaborators) and verify the agent generates a well-formatted, coherent email body."
      - "Mock data: A full data package object."


# ===================================================================
# Phase 4: MVP Dashboard and Analytics
# ===================================================================
Phase-4-Dashboard:
  - id: 4.1.1
    description: "Create a simple admin dashboard for system monitoring and basic analytics."
    status: pending
    prerequisites: [3.4.1]
    artifacts:
      - "src/dashboard/admin_dashboard.py"
      - "src/core/analytics.py"
    testing:
      - "tests/dashboard/test_admin_dashboard.py: Test dashboard endpoints, data aggregation, and system health checks."
      - "tests/core/test_analytics.py: Test recommendation effectiveness tracking and basic metrics calculation."
      - "Mock data: 'tests/mock_data/system_metrics.json', 'tests/mock_data/recommendation_history.json'"

  - id: 4.1.2
    description: "Add export capabilities for proposals and collaboration introductions."
    status: pending
    prerequisites: [3.2.1, 3.3.1]
    artifacts:
      - "src/tools/exporters/proposal_exporter.py"
      - "src/tools/exporters/collaboration_exporter.py"
    testing:
      - "tests/tools/exporters/test_proposal_exporter.py: Test generation of formatted proposal outlines in multiple formats."
      - "tests/tools/exporters/test_collaboration_exporter.py: Test collaboration introduction email generation."
      - "Mock data: Complete proposal data objects, collaboration match pairs."

  - id: 4.1.3
    description: "Implement configuration management for different institutions."
    status: pending
    prerequisites: [4.1.1]
    artifacts:
      - "src/core/config_manager.py"
      - "config/institution_templates/"
    testing:
      - "tests/core/test_config_manager.py: Test loading different institution configurations, validation, and dynamic settings management."
      - "Mock data: 'tests/mock_data/institution_configs/', sample configuration files."

# ===================================================================
# Phase 5: A2A Integration and API Exposure
# ===================================================================
Phase-5-Integration:
  - id: 5.1.1
    description: "Integrate Google ADK for agent-to-agent communication."
    status: pending
    prerequisites: [4.1.3]
    artifacts:
      - "src/core/a2a_config.py"
    testing:
      - "tests/core/test_a2a_config.py: Create two mock agents and test if they can exchange a simple message using the ADK setup."
      - "Mock data: N/A"

  - id: 5.1.2
    description: "Refactor agents to communicate and trigger each other via A2A protocol instead of direct calls."
    status: pending
    prerequisites: [5.1.1]
    artifacts:
      - "Updated files in src/agents/"
    testing:
      - "Full integration test. Trigger the Ingestion Agent and verify it kicks off the Matcher Agent, which then kicks off the subsequent agents, all via A2A."
      - "Mock data: Initial trigger call."

  - id: 5.2.1
    description: "Expose a main orchestration endpoint in FastAPI (e.g., /api/v1/run-analysis)."
    status: pending
    prerequisites: [5.1.2]
    artifacts:
      - "Updated src/main.py"
    testing:
      - "tests/test_api.py: Make a call to the new endpoint and mock the A2A call to the first agent in the chain. Verify a 'Job Started' response is returned."
      - "Mock data: N/A"


# ===================================================================
# Phase 6: Research-Forward Data Structures
# ===================================================================
Phase-6-Research-Forward:
  - id: 6.1.1
    description: "Implement structured research question generation and methodology tagging for future AI research capabilities."
    status: pending
    prerequisites: [5.2.1]
    artifacts:
      - "src/core/research_structures.py"
      - "src/agents/question_generator.py"
    testing:
      - "tests/core/test_research_structures.py: Test research question formatting, methodology classification, and literature gap identification."
      - "tests/agents/test_question_generator.py: Mock LLM calls to test structured research question generation."
      - "Mock data: Sample research domains, methodology taxonomies, literature gap examples."

  - id: 6.1.2
    description: "Add integration hooks and plugin architecture for future research automation modules."
    status: pending
    prerequisites: [6.1.1]
    artifacts:
      - "src/core/plugin_manager.py"
      - "src/interfaces/research_plugin_interface.py"
    testing:
      - "tests/core/test_plugin_manager.py: Test plugin loading, interface validation, and hook execution."
      - "Mock data: Sample plugin configurations, mock research modules."

# ===================================================================
# Phase 7: Advanced Features (Future Work)
# ===================================================================
Phase-7-Advanced:
  - id: 7.1.1
    description: "Design and implement a 'Research Agent' to perform parts of the proposed research (e.g., literature review, data simulation)."
    status: "pending"
    prerequisites: [6.1.2]
    artifacts:
      - "src/agents/research_agent.py"
    testing: "TBD"