name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, multiAgent_claudCode_setup ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pytest-cov
        
    - name: Code formatting check (black)
      run: black --check --diff src/ tests/
      
    - name: Import sorting check (isort)
      run: isort --check-only --diff src/ tests/
      
    - name: Linting (flake8)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Type checking (mypy)
      run: mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Allow mypy warnings for now

  # Comprehensive Testing
  test:
    runs-on: ubuntu-latest
    name: Test Suite
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist
        
    - name: Create data directories
      run: |
        mkdir -p data/raw data/processed
        
    - name: Run tests with coverage
      run: |
        pytest -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=80 --tb=short
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          pytest-results.xml

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
        
    - name: Security audit (safety)
      run: safety check --json || true
      
    - name: Security linting (bandit)
      run: bandit -r src/ -f json -o bandit-results.json || true
      
    - name: Upload security results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: |
          bandit-results.json

  # Docker Build and Test
  docker:
    runs-on: ubuntu-latest
    name: Docker Build & Test
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name test-container ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container
        
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [test, docker]
    if: github.event_name != 'pull_request'
    
    services:
      research-agent:
        image: ${{ needs.docker.outputs.image }}
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest
        
    - name: Wait for service to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        
    - name: Run integration tests
      run: |
        python -c "
        import requests
        import json
        
        # Test health endpoint
        response = requests.get('http://localhost:8000/health')
        assert response.status_code == 200, f'Health check failed: {response.status_code}'
        
        # Test root endpoint
        response = requests.get('http://localhost:8000/')
        assert response.status_code == 200, f'Root endpoint failed: {response.status_code}'
        
        # Test API documentation
        response = requests.get('http://localhost:8000/docs')
        assert response.status_code == 200, f'API docs failed: {response.status_code}'
        
        print('✅ All integration tests passed')
        "

  # Deployment Status
  deployment-status:
    runs-on: ubuntu-latest
    name: Deployment Status
    needs: [code-quality, test, security, docker, integration]
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.docker.result }}" == "success" ]]; then
          echo "🚀 **Deployment Ready**: All quality gates passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deployment Blocked**: Quality gates failed" >> $GITHUB_STEP_SUMMARY
        fi